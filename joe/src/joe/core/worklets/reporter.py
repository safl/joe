"""
    Report generator
    ================

    Generates a HTML report in the workflow output directory.

    Retargtable: false
    ------------------

    The report-generator works on the files generated by cijoe on the host which is
    executing cijoe. Thus, no need to make this re-targetable.


    Step arguments
    --------------

    # Whether or not the generated report should be opened (in a browser)
    report_open: true|false
"""
import logging as log
import webbrowser

import jinja2

from joe.core.processing import runlog_from_path, testreport_from_file
from joe.core.resources import dict_from_yamlfile, get_resources


def worklet_entry(args, cijoe, step):
    """Produce a HTML report of the 'workflow.state' file in 'args.output'"""

    report_open = step.get("with", {"report_open": True}.get("report_open", True))

    resources = get_resources()

    template_path = resources["templates"]["core.report-workflow"].path
    report_path = args.output / "report.html"

    log.info(f"template: {template_path}")
    log.info(f"report: {report_path}")

    workflow_state = dict_from_yamlfile(args.output / "workflow.state")
    workflow_state["config"] = cijoe.config.options

    for step in workflow_state["steps"]:
        if "extras" not in step:
            step["extras"] = {}

        step_path = args.output / step["id"]
        if not step_path.exists():
            continue

        runlog = runlog_from_path(step_path)
        if runlog:
            step["extras"]["runlog"] = runlog

        testreport = testreport_from_file(step_path)
        if testreport:
            step["extras"]["testreport"] = testreport

    template = jinja2.Environment(
        autoescape=True, loader=jinja2.FileSystemLoader(template_path.parent)
    ).get_template(template_path.name)

    with (report_path).open("w") as report:
        report.write(template.render(workflow_state))

    if report_open:
        webbrowser.open(str(report_path))

    return 0
